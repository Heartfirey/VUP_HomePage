// src/components/LiveRecord/Timeline.js
import React, { useState, useRef, useEffect } from 'react';
import clsx from 'clsx';
import dayjs from 'dayjs';

// 导入MUI图标
import MusicNoteIcon from '@mui/icons-material/MusicNote';
import EmojiEventsIcon from '@mui/icons-material/EmojiEvents';
import ChatBubbleIcon from '@mui/icons-material/ChatBubble';
import FlagIcon from '@mui/icons-material/Flag';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import StopIcon from '@mui/icons-material/Stop';
import PauseIcon from '@mui/icons-material/Pause';
import StarIcon from '@mui/icons-material/Star';

const iconMap = {
    song: MusicNoteIcon,
    milestone: EmojiEventsIcon,
    chat: ChatBubbleIcon,
    flag: FlagIcon,
    start: PlayArrowIcon,
    end: StopIcon,
    break: PauseIcon,
    highlight: StarIcon
};

const Timeline = ({ points = [], streamStartTime, duration, className }) => {
    const [hoveredPoint, setHoveredPoint] = useState(null);
    const [selectedPoint, setSelectedPoint] = useState(null);
    const [cardHeights, setCardHeights] = useState({});
    const cardRefs = useRef({});
    
    // 测量卡片高度
    useEffect(() => {
        const measureHeights = () => {
            const heights = {};
            Object.keys(cardRefs.current).forEach(pointId => {
                const element = cardRefs.current[pointId];
                if (element) {
                    heights[pointId] = element.offsetHeight;
                }
            });
            setCardHeights(heights);
        };
        
        // 初始测量
        measureHeights();
        
        // 监听窗口大小变化
        window.addEventListener('resize', measureHeights);
        return () => window.removeEventListener('resize', measureHeights);
    }, [points]);
    
    // 处理时间轴数据，自动添加开始和结束事件
    const processTimelinePoints = () => {
        const processedPoints = [...points];
        
        if (!streamStartTime) {
            return processedPoints;
        }
        
        const startTimestamp = dayjs(streamStartTime).unix();
        
        // 检查是否已有开始事件
        const hasStartEvent = processedPoints.some(point => 
            point.type === 'start' || Math.abs(point.time - startTimestamp) < 60
        );
        
        // 如果没有开始事件，自动添加
        if (!hasStartEvent) {
            processedPoints.unshift({
                id: 'auto_start',
                type: 'start',
                name: '直播开始',
                time: startTimestamp,
                url: '',
                note: '直播正式开始',
                backgroundColor: 'rgba(0, 230, 118, 0.3)',
                foregroundColor: 'rgba(0, 230, 118)',
                isAutoGenerated: true
            });
        }
        
        // 如果有duration，添加结束事件
        if (duration && duration > 0) {
            const endTimestamp = startTimestamp + (duration * 60); // duration是分钟，转为秒
            
            // 检查是否已有结束事件
            const hasEndEvent = processedPoints.some(point => 
                point.type === 'end' || Math.abs(point.time - endTimestamp) < 60
            );
            
            if (!hasEndEvent) {
                processedPoints.push({
                    id: 'auto_end',
                    type: 'end', 
                    name: '直播结束',
                    time: endTimestamp,
                    url: '',
                    note: '直播正式结束',
                    backgroundColor: 'rgba(200,200,200,0.5)',
                    foregroundColor: 'rgba(200,200,200,1)',
                    isAutoGenerated: true
                });
            }
        }
        
        return processedPoints;
    };
    
    const allPoints = processTimelinePoints();
    
    if (!allPoints || allPoints.length === 0) {
        return (
            <div className={clsx("flex items-center justify-center p-8", className)}>
                <div className="text-gray-400 text-sm">暂无时间轴数据</div>
            </div>
        );
    }
    
    // 按时间排序点
    const sortedPoints = [...allPoints].sort((a, b) => a.time - b.time);
    
    // 均匀分布时间点位置（不按真实时间比例）
    const getPointPosition = (index, totalPoints) => {
        if (totalPoints === 1) return 50; // 单个点居中
        
        // 留出两边的边距，在中间区域均匀分布
        const leftMargin = 5; // 5%
        const rightMargin = 5; // 5%
        const availableWidth = 100 - leftMargin - rightMargin; // 90%
        
        if (totalPoints === 2) {
            return index === 0 ? leftMargin + availableWidth * 0.2 : leftMargin + availableWidth * 0.8;
        }
        
        // 多个点的情况，均匀分布
        const step = availableWidth / (totalPoints - 1);
        return leftMargin + (index * step);
    };
    
    // 格式化时间显示
    const formatTime = (timestamp) => {
        const time = dayjs.unix(timestamp);
        const streamStart = dayjs(streamStartTime);
        const diff = time.diff(streamStart, 'minute');
        
        if (diff < 60) {
            return `${diff}分钟`;
        } else {
            const hours = Math.floor(diff / 60);
            const minutes = diff % 60;
            return `${hours}小时${minutes}分钟`;
        }
    };
    
    const TimelinePoint = ({ point, position, index }) => {
        const IconComponent = iconMap[point.type] || StarIcon;
        const isHovered = hoveredPoint === point.id;
        const isSelected = selectedPoint === point.id;
        
        return (
            <div
                className="absolute transform -translate-x-1/2"
                style={{ 
                    left: `${position}%`,
                    top: '24px', // 调整位置让时间点居中
                    zIndex: isHovered || isSelected ? 50 : 20
                }}
            >
                <div
                    className={clsx(
                        "relative cursor-pointer transition-all duration-200",
                        "hover:scale-110"
                    )}
                    onMouseEnter={() => setHoveredPoint(point.id)}
                    onMouseLeave={() => setHoveredPoint(null)}
                    onClick={() => setSelectedPoint(isSelected ? null : point.id)}
                >
                    {/* Icon point - 直接显示，不需要连接线 */}
                    <div
                        className={clsx(
                            "w-8 h-8 rounded-full flex items-center justify-center",
                            "border-2 transition-all duration-200 relative",
                            isHovered && "shadow-lg scale-110",
                            isSelected && "ring-2 ring-white ring-opacity-50"
                        )}
                        style={{
                            backgroundColor: point.backgroundColor || 'rgba(255,255,255,0.1)',
                            borderColor: point.foregroundColor || '#666'
                        }}
                    >
                        <IconComponent 
                            sx={{ 
                                fontSize: 16, 
                                color: point.foregroundColor || '#666' 
                            }} 
                        />
                    </div>
                    
                    {(isHovered || isSelected) && (
                        <div 
                            className={clsx(
                                "absolute z-50",
                                "bg-black/95 text-white text-xs rounded-lg p-3 min-w-max max-w-xs",
                                "shadow-xl backdrop-blur-sm border border-white/20"
                            )}
                            style={{
                                bottom: '45px', // 调整为适应简化的布局
                                left: '50%',
                                transform: 'translateX(-50%)',
                                // 边界检测：如果太靠边则调整位置
                                ...(position < 15 && { 
                                    left: '0px', 
                                    transform: 'translateX(0%)' 
                                }),
                                ...(position > 85 && { 
                                    right: '0px', 
                                    left: 'auto',
                                    transform: 'translateX(0%)' 
                                })
                            }}
                        >
                            <div className="font-medium">{point.name}</div>
                            <div className="text-gray-300 mt-1">
                                {formatTime(point.time)}
                            </div>
                            {point.note && point.note.trim() && (
                                <div className="text-gray-400 mt-1 text-xs">
                                    {point.note}
                                </div>
                            )}
                            {point.url && point.url.trim() && (
                                <a 
                                    href={point.url}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="text-blue-400 hover:text-blue-300 text-xs mt-1 block"
                                    onClick={(e) => e.stopPropagation()}
                                >
                                    🔗 查看详情
                                </a>
                            )}
                            
                            <div 
                                className="absolute"
                                style={{
                                    bottom: '-4px',
                                    left: position < 15 ? '16px' : position > 85 ? 'calc(100% - 20px)' : '50%',
                                    transform: 'translateX(-50%)',
                                    width: 0,
                                    height: 0,
                                    borderLeft: '4px solid transparent',
                                    borderRight: '4px solid transparent',
                                    borderTop: '4px solid rgba(0,0,0,0.95)'
                                }}
                            />
                        </div>
                    )}
                </div>
            </div>
        );
    };
    
    return (
        <div className={clsx("relative", className)}>
            <div className="block md:hidden">
                <div>
                    {sortedPoints.map((point, index) => {
                        const IconComponent = iconMap[point.type] || StarIcon;
                        const isLast = index === sortedPoints.length - 1;
                        const cardHeight = cardHeights[point.id] || 0;
                        const connectionHeight = cardHeight > 0 ? cardHeight + 16 - 32 - 8 : 24; // 卡片高度 + 间距 - 圆圈高度 - 间隙
                        
                        return (
                            <div key={point.id} className="relative">
                                <div className="flex items-start space-x-3 mb-4 last:mb-0">
                                    {/* 时间点图标区域 */}
                                    <div className="flex-shrink-0 relative">
                                        <div
                                            className="w-8 h-8 rounded-full border-2 flex items-center justify-center shadow-lg relative z-10"
                                            style={{
                                                backgroundColor: point.backgroundColor || 'rgba(255,255,255,0.1)',
                                                borderColor: point.foregroundColor || '#666'
                                            }}
                                        >
                                            <IconComponent 
                                                sx={{ 
                                                    fontSize: 16, 
                                                    color: point.foregroundColor || '#666' 
                                                }} 
                                            />
                                        </div>
                                    </div>
                                    
                                    {/* 内容卡片 */}
                                    <div className="flex-1 min-w-0">
                                        <div 
                                            ref={el => cardRefs.current[point.id] = el}
                                            className="bg-white/5 rounded-lg p-3 backdrop-blur-sm border border-white/10 shadow-sm"
                                        >
                                            <div className="flex justify-between items-start gap-2">
                                                <h4 className="font-medium text-white text-sm flex-1">{point.name}</h4>
                                                <span className="text-xs text-gray-400 flex-shrink-0">
                                                    {formatTime(point.time)}
                                                </span>
                                            </div>
                                            {point.note && point.note.trim() && (
                                                <p className="text-gray-300 text-xs mt-2 leading-relaxed">{point.note}</p>
                                            )}
                                            {point.url && point.url.trim() && (
                                                <a 
                                                    href={point.url}
                                                    target="_blank"
                                                    rel="noopener noreferrer"
                                                    className="inline-flex items-center text-blue-400 hover:text-blue-300 text-xs mt-2 transition-colors"
                                                >
                                                    录播链接
                                                </a>
                                            )}
                                        </div>
                                    </div>
                                </div>
                                
                                {!isLast && (
                                    <div 
                                        className="absolute left-4 w-0.5 rounded-full"
                                        style={{ 
                                            backgroundColor: point.foregroundColor || '#9CA3AF',
                                            top: '36px', // 从当前圆圈下方开始 (32px圆圈高度 + 4px间隙)
                                            height: `${connectionHeight}px`, // 动态计算的高度
                                            transform: 'translateX(-1px)'
                                        }}
                                    />
                                )}
                            </div>
                        );
                    })}
                </div>
            </div>
            
            <div className="hidden md:block">
                <div className="relative mb-4" style={{ height: '80px', paddingBottom: '20px' }}>
                    {sortedPoints.map((point, index) => (
                        <TimelinePoint
                            key={point.id}
                            point={point}
                            position={getPointPosition(index, sortedPoints.length)}
                            index={index}
                        />
                    ))}
                    
                    {sortedPoints.length > 1 && sortedPoints.map((point, index) => {
                        if (index >= sortedPoints.length - 1) return null;
                        
                        const currentPos = getPointPosition(index, sortedPoints.length);
                        const nextPos = getPointPosition(index + 1, sortedPoints.length);
                        
                        return (
                            <div
                                key={`line-${index}`}
                                className="absolute h-0.5 rounded-full"
                                style={{
                                    top: '40px',
                                    left: `${currentPos + 2}%`, // 从当前点稍微偏移开始
                                    width: `${nextPos - currentPos - 4}%`, // 到下一个点稍微偏移结束
                                    backgroundColor: point.foregroundColor || '#9CA3AF'
                                }}
                            />
                        );
                    })}
                </div>
                
                <div className="flex justify-between text-xs text-gray-400 mt-2">
                    <span>
                        {sortedPoints.length > 0 ? formatTime(sortedPoints[0].time) : '开始'}
                    </span>
                    <span>总时长: {Math.floor(duration / 60)}h{duration % 60}m</span>
                    <span>
                        {sortedPoints.length > 0 ? formatTime(sortedPoints[sortedPoints.length - 1].time) : '结束'}
                    </span>
                </div>
            </div>
        </div>
    );
};

export default Timeline;
